{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"la vista del campo di testo \\xE8 aperta, passare alla vista \".concat(viewType) : \"la vista aperta \\xE8: \".concat(viewType, \", vai alla vista del campo di testo\"),\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Seleziona data',\n  dateTimePickerDefaultToolbarTitle: 'Seleziona data e orario',\n  timePickerDefaultToolbarTitle: 'Seleziona orario',\n  dateRangePickerDefaultToolbarTitle: 'Seleziona intervallo di date',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"Seleziona \".concat(views[view], \". \").concat(time === null ? 'Nessun orario selezionato' : \"L'ora selezionata \\xE8 \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" ore\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" minuti\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" secondi\"),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Scegli la data, la data selezionata \\xE8 \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Scegli la data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Scegli l'ora, l'ora selezionata \\xE8 \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Scegli l'ora\",\n  // Table labels\n  timeTableLabel: \"scegli un'ora\",\n  dateTableLabel: 'scegli una data'\n};\nexport const itIT = getPickersLocalization(itITPickers);","map":null,"metadata":{},"sourceType":"module"}