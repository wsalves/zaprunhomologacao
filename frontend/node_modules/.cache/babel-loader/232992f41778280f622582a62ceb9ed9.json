{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // maps ClockPickerView to its translation\n\nconst clockViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst pickerViews = {\n  calendar: 'Kalenderansicht',\n  clock: 'Uhransicht'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"Texteingabeansicht ist ge\\xF6ffnet, zur \".concat(pickerViews[viewType], \" wechseln\") : \"\".concat(pickerViews[viewType], \" ist ge\\xF6ffnet, zur Texteingabeansicht wechseln\"),\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Datum auswählen',\n  dateTimePickerDefaultToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerDefaultToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerDefaultToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _clockViews$view;\n    return \"\".concat((_clockViews$view = clockViews[view]) != null ? _clockViews$view : view, \" ausw\\xE4hlen. \").concat(time === null ? 'Keine Uhrzeit ausgewählt' : \"Gew\\xE4hlte Uhrzeit ist \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: hours => \"\".concat(hours, \" \").concat(clockViews.hours),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" \").concat(clockViews.minutes),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \"  \").concat(clockViews.seconds),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Datum ausw\\xE4hlen, gew\\xE4hltes Datum ist \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Datum auswählen',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Uhrzeit ausw\\xE4hlen, gew\\xE4hlte Uhrzeit ist \".concat(utils.format(utils.date(rawValue), 'fullTime')) : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen'\n};\nexport const deDE = getPickersLocalization(deDEPickers);","map":null,"metadata":{},"sourceType":"module"}