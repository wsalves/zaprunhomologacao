{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _Base = require(\"../styles/Base\");\nvar _autosize = _interopRequireDefault(require(\"autosize\"));\nclass InlineInputController extends _react.default.Component {\n  constructor() {\n    super(...arguments);\n    (0, _defineProperty2.default)(this, \"onFocus\", e => e.target.select());\n    (0, _defineProperty2.default)(this, \"onMouseDown\", e => {\n      if (document.activeElement != e.target) {\n        e.preventDefault();\n        this.refInput.focus();\n      }\n    });\n    (0, _defineProperty2.default)(this, \"onBlur\", () => {\n      this.updateValue();\n    });\n    (0, _defineProperty2.default)(this, \"onKeyDown\", e => {\n      if (e.keyCode == 13) {\n        this.refInput.blur();\n        e.preventDefault();\n      }\n      if (e.keyCode == 27) {\n        this.setValue(this.props.value);\n        this.refInput.blur();\n        e.preventDefault();\n      }\n      if (e.keyCode == 9) {\n        if (this.getValue().length == 0) {\n          this.props.onCancel();\n        }\n        this.refInput.blur();\n        e.preventDefault();\n      }\n    });\n    (0, _defineProperty2.default)(this, \"getValue\", () => this.refInput.value);\n    (0, _defineProperty2.default)(this, \"setValue\", value => this.refInput.value = value);\n    (0, _defineProperty2.default)(this, \"updateValue\", () => {\n      if (this.getValue() != this.props.value) {\n        this.props.onSave(this.getValue());\n      }\n    });\n    (0, _defineProperty2.default)(this, \"setRef\", ref => {\n      this.refInput = ref;\n      if (this.props.resize != 'none') {\n        (0, _autosize.default)(this.refInput);\n      }\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setValue(nextProps.value);\n  }\n  render() {\n    const _this$props = this.props,\n      autoFocus = _this$props.autoFocus,\n      border = _this$props.border,\n      value = _this$props.value,\n      placeholder = _this$props.placeholder;\n    return _react.default.createElement(_Base.InlineInput, {\n      ref: this.setRef,\n      border: border,\n      onMouseDown: this.onMouseDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: this.onKeyDown,\n      placeholder: value.length == 0 ? undefined : placeholder,\n      defaultValue: value,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      autoCapitalize: \"off\",\n      spellCheck: \"false\",\n      dataGramm: \"false\",\n      rows: 1,\n      autoFocus: autoFocus\n    });\n  }\n}\nInlineInputController.propTypes = {\n  onSave: _propTypes.default.func,\n  border: _propTypes.default.bool,\n  placeholder: _propTypes.default.string,\n  value: _propTypes.default.string,\n  autoFocus: _propTypes.default.bool,\n  resize: _propTypes.default.oneOf(['none', 'vertical', 'horizontal'])\n};\nInlineInputController.defaultProps = {\n  onSave: () => {},\n  placeholder: '',\n  value: '',\n  border: false,\n  autoFocus: false,\n  resize: 'none'\n};\nvar _default = InlineInputController;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}