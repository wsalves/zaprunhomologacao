{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst viewTranslation = {\n  calendar: 'calendrier',\n  clock: 'horloge'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? \"passer du champ text au \".concat(viewTranslation[viewType]) : \"passer du \".concat(viewTranslation[viewType], \" au champ text\"),\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => \"Choix des \".concat(views[view], \". \").concat(time === null ? 'Aucune heure choisie' : \"L'heure choisie est \".concat(adapter.format(time, 'fullTime'))),\n  hoursClockNumberText: hours => \"\".concat(hours, \" heures\"),\n  minutesClockNumberText: minutes => \"\".concat(minutes, \" minutes\"),\n  secondsClockNumberText: seconds => \"\".concat(seconds, \" secondes\"),\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir la date, la date s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir l'heure, l'heure s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);","map":null,"metadata":{},"sourceType":"module"}