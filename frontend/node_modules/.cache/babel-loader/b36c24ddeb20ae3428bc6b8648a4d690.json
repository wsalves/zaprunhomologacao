{"ast":null,"code":"import React,{useState,useEffect,useContext}from\"react\";import{useHistory}from\"react-router-dom\";import TextField from\"@material-ui/core/TextField\";import Dialog from\"@material-ui/core/Dialog\";import DialogActions from\"@material-ui/core/DialogActions\";import DialogContent from\"@material-ui/core/DialogContent\";import DialogTitle from\"@material-ui/core/DialogTitle\";import Autocomplete,{createFilterOptions}from\"@material-ui/lab/Autocomplete\";import CircularProgress from\"@material-ui/core/CircularProgress\";import{i18n}from\"../../translate/i18n\";import api from\"../../services/api\";import ButtonWithSpinner from\"../ButtonWithSpinner\";import ContactModal from\"../ContactModal\";import toastError from\"../../errors/toastError\";import{AuthContext}from\"../../context/Auth/AuthContext\";import{Typography}from\"@mui/material\";import{FormControlLabel,Switch}from\"@material-ui/core\";const ForwardMessageModal=_ref=>{let{messages,onClose,modalOpen}=_ref;const[optionsContacts,setOptionsContacts]=useState([]);const[loading,setLoading]=useState(false);const[searchParam,setSearchParam]=useState(\"\");const[selectedContact,setSelectedContact]=useState(null);const[newContact,setNewContact]=useState({});const[contactModalOpen,setContactModalOpen]=useState(false);const{user}=useContext(AuthContext);const[sending,setSending]=useState(false);const[messageSending,setMessageSending]=useState('');const[signMessage,setSignMessage]=useState(true);useEffect(()=>{if(!modalOpen||searchParam.length<3){setLoading(false);return;}setLoading(true);const delayDebounceFn=setTimeout(()=>{const fetchContacts=async()=>{try{const{data}=await api.get(\"contacts\",{params:{searchParam}});setOptionsContacts(data.contacts);setLoading(false);}catch(err){setLoading(false);toastError(err);}};fetchContacts();},500);return()=>clearTimeout(delayDebounceFn);},[searchParam,modalOpen]);const history=useHistory();const sleep=ms=>{return new Promise(resolve=>setTimeout(resolve,ms));};const handleForwardMessage=async contactL=>{const responseList=[];for(const message of messages){setSending(true);try{setMessageSending(message.id);const response=await api.post('/message/forward',{messageId:message.id,contactId:contactL.id,signMessage:signMessage});responseList.push(response);sleep(900);}catch(error){toastError(error);}}setSending(false);history.push('/tickets');};const handleSelectOption=(e,newValue)=>{if(newValue===null||newValue===void 0?void 0:newValue.number){setSelectedContact(newValue);}else if(newValue===null||newValue===void 0?void 0:newValue.name){setNewContact({name:newValue.name});setContactModalOpen(true);}};const handleClose=()=>{onClose();setSearchParam(\"\");setSelectedContact(null);setSending(false);};const handleCloseContactModal=()=>{setContactModalOpen(false);};const renderOption=optionL=>{if(optionL.number){return\"\".concat(optionL.name,\" - \").concat(optionL.number);}else{return\"Nenhum contato encontrado com o nome \".concat(optionL.name);}};const renderOptionLabel=optionL=>{if(optionL.number){return\"\".concat(optionL.name,\" - \").concat(optionL.number);}else{return\"\".concat(optionL.name);}};const filter=createFilterOptions({trim:true});const createAddContactOption=(filterOptions,params)=>{const filtered=filter(filterOptions,params);if(params.inputValue!==\"\"&&!loading&&searchParam.length>=3){filtered.push({name:\"\".concat(params.inputValue)});}return filtered;};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ContactModal,{open:contactModalOpen,initialValues:newContact,onClose:handleCloseContactModal}),/*#__PURE__*/React.createElement(Dialog,{open:modalOpen,onClose:handleClose},/*#__PURE__*/React.createElement(DialogTitle,{id:\"form-dialog-title\"},\"Encaminhar mensagem\"),/*#__PURE__*/React.createElement(DialogContent,{dividers:true},/*#__PURE__*/React.createElement(Autocomplete,{options:optionsContacts,loading:loading,style:{width:300},clearOnBlur:true,autoHighlight:true,freeSolo:true,clearOnEscape:true,getOptionLabel:renderOptionLabel,renderOption:renderOption,filterOptions:createAddContactOption,onChange:(e,newValue)=>handleSelectOption(e,newValue),renderInput:params=>/*#__PURE__*/React.createElement(TextField,Object.assign({},params,{label:i18n.t(\"newTicketModal.fieldLabel\"),variant:\"outlined\",autoFocus:true,onChange:e=>setSearchParam(e.target.value),onKeyPress:e=>{if(loading||!selectedContact)return;else if(e.key===\"Enter\"){// handleSaveTicket(selectedContact.id);\n}},InputProps:{...params.InputProps,endAdornment:/*#__PURE__*/React.createElement(React.Fragment,null,loading?/*#__PURE__*/React.createElement(CircularProgress,{color:\"inherit\",size:20}):null,params.InputProps.endAdornment)}}))})),/*#__PURE__*/React.createElement(DialogActions,null,sending&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(CircularProgress,{color:\"inherit\",size:20}),/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",color:\"textSecondary\"},\"Enviando \",messageSending,\"...\")),/*#__PURE__*/React.createElement(FormControlLabel,{style:{marginRight:7,color:\"gray\"},label:i18n.t(\"messagesInput.signMessage\"),labelPlacement:\"start\",control:/*#__PURE__*/React.createElement(Switch,{size:\"small\",checked:signMessage,onChange:e=>{setSignMessage(e.target.checked);},name:\"showAllTickets\",color:\"primary\"})}),/*#__PURE__*/React.createElement(ButtonWithSpinner,{variant:\"contained\",type:\"button\",disabled:!selectedContact||sending,onClick:()=>handleForwardMessage(selectedContact),color:\"primary\",loading:loading},\"Encaminhar\"))));};export default ForwardMessageModal;","map":null,"metadata":{},"sourceType":"module"}