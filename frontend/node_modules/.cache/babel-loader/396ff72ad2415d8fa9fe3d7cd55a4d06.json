{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _redux = require(\"redux\");\nvar _reactRedux = require(\"react-redux\");\nvar _Container = _interopRequireDefault(require(\"../dnd/Container\"));\nvar _Draggable = _interopRequireDefault(require(\"../dnd/Draggable\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _Lane = _interopRequireDefault(require(\"./Lane\"));\nvar _reactPopopo = require(\"react-popopo\");\nvar boardActions = _interopRequireWildcard(require(\"../actions/BoardActions\"));\nvar laneActions = _interopRequireWildcard(require(\"../actions/LaneActions\"));\nclass BoardContainer extends _react.Component {\n  constructor() {\n    super(...arguments);\n    (0, _defineProperty2.default)(this, \"state\", {\n      addLaneMode: false\n    });\n    (0, _defineProperty2.default)(this, \"onDragStart\", _ref => {\n      let {\n        payload\n      } = _ref;\n      const handleLaneDragStart = this.props.handleLaneDragStart;\n      handleLaneDragStart(payload.id);\n    });\n    (0, _defineProperty2.default)(this, \"onLaneDrop\", _ref2 => {\n      let {\n        removedIndex,\n        addedIndex,\n        payload\n      } = _ref2;\n      const _this$props = this.props,\n        actions = _this$props.actions,\n        handleLaneDragEnd = _this$props.handleLaneDragEnd;\n      if (removedIndex !== addedIndex) {\n        actions.moveLane({\n          oldIndex: removedIndex,\n          newIndex: addedIndex\n        });\n        handleLaneDragEnd(removedIndex, addedIndex, payload);\n      }\n    });\n    (0, _defineProperty2.default)(this, \"getCardDetails\", (laneId, cardIndex) => {\n      return this.props.reducerData.lanes.find(lane => lane.id === laneId).cards[cardIndex];\n    });\n    (0, _defineProperty2.default)(this, \"getLaneDetails\", index => {\n      return this.props.reducerData.lanes[index];\n    });\n    (0, _defineProperty2.default)(this, \"wireEventBus\", () => {\n      const _this$props2 = this.props,\n        actions = _this$props2.actions,\n        eventBusHandle = _this$props2.eventBusHandle;\n      let eventBus = {\n        publish: event => {\n          switch (event.type) {\n            case 'ADD_CARD':\n              return actions.addCard({\n                laneId: event.laneId,\n                card: event.card\n              });\n            case 'UPDATE_CARD':\n              return actions.updateCard({\n                laneId: event.laneId,\n                card: event.card\n              });\n            case 'REMOVE_CARD':\n              return actions.removeCard({\n                laneId: event.laneId,\n                cardId: event.cardId\n              });\n            case 'REFRESH_BOARD':\n              return actions.loadBoard(event.data);\n            case 'MOVE_CARD':\n              return actions.moveCardAcrossLanes({\n                fromLaneId: event.fromLaneId,\n                toLaneId: event.toLaneId,\n                cardId: event.cardId,\n                index: event.index\n              });\n            case 'UPDATE_CARDS':\n              return actions.updateCards({\n                laneId: event.laneId,\n                cards: event.cards\n              });\n            case 'UPDATE_CARD':\n              return actions.updateCard({\n                laneId: event.laneId,\n                updatedCard: event.card\n              });\n            case 'UPDATE_LANES':\n              return actions.updateLanes(event.lanes);\n            case 'UPDATE_LANE':\n              return actions.updateLane(event.lane);\n          }\n        }\n      };\n      eventBusHandle(eventBus);\n    });\n    (0, _defineProperty2.default)(this, \"hideEditableLane\", () => {\n      this.setState({\n        addLaneMode: false\n      });\n    });\n    (0, _defineProperty2.default)(this, \"showEditableLane\", () => {\n      this.setState({\n        addLaneMode: true\n      });\n    });\n    (0, _defineProperty2.default)(this, \"addNewLane\", params => {\n      this.hideEditableLane();\n      this.props.actions.addLane(params);\n      this.props.onLaneAdd(params);\n    });\n  }\n  componentDidMount() {\n    const _this$props3 = this.props,\n      actions = _this$props3.actions,\n      eventBusHandle = _this$props3.eventBusHandle;\n    actions.loadBoard(this.props.data);\n    if (eventBusHandle) {\n      this.wireEventBus();\n    }\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // nextProps.data changes when external Board input props change and nextProps.reducerData changes due to event bus or UI changes\n    const _this$props4 = this.props,\n      data = _this$props4.data,\n      reducerData = _this$props4.reducerData,\n      onDataChange = _this$props4.onDataChange;\n    if (nextProps.reducerData && !(0, _isEqual.default)(reducerData, nextProps.reducerData)) {\n      onDataChange(nextProps.reducerData);\n    }\n    if (nextProps.data && !(0, _isEqual.default)(nextProps.data, data)) {\n      this.props.actions.loadBoard(nextProps.data);\n      onDataChange(nextProps.data);\n    }\n  }\n  get groupName() {\n    const id = this.props.id;\n    return \"TrelloBoard\".concat(id);\n  }\n  render() {\n    const _this$props5 = this.props,\n      id = _this$props5.id,\n      components = _this$props5.components,\n      reducerData = _this$props5.reducerData,\n      draggable = _this$props5.draggable,\n      laneDraggable = _this$props5.laneDraggable,\n      laneDragClass = _this$props5.laneDragClass,\n      laneDropClass = _this$props5.laneDropClass,\n      style = _this$props5.style,\n      onDataChange = _this$props5.onDataChange,\n      onCardAdd = _this$props5.onCardAdd,\n      onCardUpdate = _this$props5.onCardUpdate,\n      onCardClick = _this$props5.onCardClick,\n      onBeforeCardDelete = _this$props5.onBeforeCardDelete,\n      onCardDelete = _this$props5.onCardDelete,\n      onLaneScroll = _this$props5.onLaneScroll,\n      onLaneClick = _this$props5.onLaneClick,\n      onLaneAdd = _this$props5.onLaneAdd,\n      onLaneDelete = _this$props5.onLaneDelete,\n      onLaneUpdate = _this$props5.onLaneUpdate,\n      editable = _this$props5.editable,\n      canAddLanes = _this$props5.canAddLanes,\n      laneStyle = _this$props5.laneStyle,\n      onCardMoveAcrossLanes = _this$props5.onCardMoveAcrossLanes,\n      t = _this$props5.t,\n      otherProps = (0, _objectWithoutProperties2.default)(_this$props5, [\"id\", \"components\", \"reducerData\", \"draggable\", \"laneDraggable\", \"laneDragClass\", \"laneDropClass\", \"style\", \"onDataChange\", \"onCardAdd\", \"onCardUpdate\", \"onCardClick\", \"onBeforeCardDelete\", \"onCardDelete\", \"onLaneScroll\", \"onLaneClick\", \"onLaneAdd\", \"onLaneDelete\", \"onLaneUpdate\", \"editable\", \"canAddLanes\", \"laneStyle\", \"onCardMoveAcrossLanes\", \"t\"]);\n    const addLaneMode = this.state.addLaneMode; // Stick to whitelisting attributes to segregate board and lane props\n\n    const passthroughProps = (0, _pick.default)(this.props, ['onCardMoveAcrossLanes', 'onLaneScroll', 'onLaneDelete', 'onLaneUpdate', 'onCardClick', 'onBeforeCardDelete', 'onCardDelete', 'onCardAdd', 'onCardUpdate', 'onLaneClick', 'laneSortFunction', 'draggable', 'laneDraggable', 'cardDraggable', 'collapsibleLanes', 'canAddLanes', 'hideCardDeleteIcon', 'tagStyle', 'handleDragStart', 'handleDragEnd', 'cardDragClass', 'editLaneTitle', 't']);\n    return _react.default.createElement(components.BoardWrapper, (0, _extends2.default)({\n      style: style\n    }, otherProps, {\n      draggable: false\n    }), _react.default.createElement(_reactPopopo.PopoverWrapper, null, _react.default.createElement(_Container.default, {\n      orientation: \"horizontal\",\n      onDragStart: this.onDragStart,\n      dragClass: laneDragClass,\n      dropClass: laneDropClass,\n      onDrop: this.onLaneDrop,\n      lockAxis: \"x\",\n      getChildPayload: index => this.getLaneDetails(index),\n      groupName: this.groupName\n    }, reducerData.lanes.map((lane, index) => {\n      const id = lane.id,\n        droppable = lane.droppable,\n        otherProps = (0, _objectWithoutProperties2.default)(lane, [\"id\", \"droppable\"]);\n      const laneToRender = _react.default.createElement(_Lane.default, (0, _extends2.default)({\n        key: id,\n        boardId: this.groupName,\n        components: components,\n        id: id,\n        getCardDetails: this.getCardDetails,\n        index: index,\n        droppable: droppable === undefined ? true : droppable,\n        style: laneStyle || lane.style || {},\n        labelStyle: lane.labelStyle || {},\n        cardStyle: this.props.cardStyle || lane.cardStyle,\n        editable: editable && !lane.disallowAddingCard\n      }, otherProps, passthroughProps));\n      return draggable && laneDraggable ? _react.default.createElement(_Draggable.default, {\n        key: lane.id\n      }, laneToRender) : laneToRender;\n    }))), canAddLanes && _react.default.createElement(_Container.default, {\n      orientation: \"horizontal\"\n    }, editable && !addLaneMode ? _react.default.createElement(components.NewLaneSection, {\n      t: t,\n      onClick: this.showEditableLane\n    }) : addLaneMode && _react.default.createElement(components.NewLaneForm, {\n      onCancel: this.hideEditableLane,\n      onAdd: this.addNewLane,\n      t: t\n    })));\n  }\n}\nBoardContainer.propTypes = {\n  id: _propTypes.default.string,\n  components: _propTypes.default.object,\n  actions: _propTypes.default.object,\n  data: _propTypes.default.object.isRequired,\n  reducerData: _propTypes.default.object,\n  onDataChange: _propTypes.default.func,\n  eventBusHandle: _propTypes.default.func,\n  onLaneScroll: _propTypes.default.func,\n  onCardClick: _propTypes.default.func,\n  onBeforeCardDelete: _propTypes.default.func,\n  onCardDelete: _propTypes.default.func,\n  onCardAdd: _propTypes.default.func,\n  onCardUpdate: _propTypes.default.func,\n  onLaneAdd: _propTypes.default.func,\n  onLaneDelete: _propTypes.default.func,\n  onLaneClick: _propTypes.default.func,\n  onLaneUpdate: _propTypes.default.func,\n  laneSortFunction: _propTypes.default.func,\n  draggable: _propTypes.default.bool,\n  collapsibleLanes: _propTypes.default.bool,\n  editable: _propTypes.default.bool,\n  canAddLanes: _propTypes.default.bool,\n  hideCardDeleteIcon: _propTypes.default.bool,\n  handleDragStart: _propTypes.default.func,\n  handleDragEnd: _propTypes.default.func,\n  handleLaneDragStart: _propTypes.default.func,\n  handleLaneDragEnd: _propTypes.default.func,\n  style: _propTypes.default.object,\n  tagStyle: _propTypes.default.object,\n  laneDraggable: _propTypes.default.bool,\n  cardDraggable: _propTypes.default.bool,\n  cardDragClass: _propTypes.default.string,\n  laneDragClass: _propTypes.default.string,\n  laneDropClass: _propTypes.default.string,\n  onCardMoveAcrossLanes: _propTypes.default.func.isRequired,\n  t: _propTypes.default.func.isRequired\n};\nBoardContainer.defaultProps = {\n  t: v => v,\n  onDataChange: () => {},\n  handleDragStart: () => {},\n  handleDragEnd: () => {},\n  handleLaneDragStart: () => {},\n  handleLaneDragEnd: () => {},\n  onCardUpdate: () => {},\n  onLaneAdd: () => {},\n  onLaneDelete: () => {},\n  onCardMoveAcrossLanes: () => {},\n  onLaneUpdate: () => {},\n  editable: false,\n  canAddLanes: false,\n  hideCardDeleteIcon: false,\n  draggable: false,\n  collapsibleLanes: false,\n  laneDraggable: true,\n  cardDraggable: true,\n  cardDragClass: 'react_trello_dragClass',\n  laneDragClass: 'react_trello_dragLaneClass',\n  laneDropClass: ''\n};\nconst mapStateToProps = state => {\n  return state.lanes ? {\n    reducerData: state\n  } : {};\n};\nconst mapDispatchToProps = dispatch => ({\n  actions: (0, _redux.bindActionCreators)((0, _objectSpread2.default)({}, boardActions, laneActions), dispatch)\n});\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(BoardContainer);\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}