{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport React, { createRef, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport PageContext from '../PageContext';\nimport { isPage, isRotate } from '../shared/propTypes';\nexport var TextLayerItemInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextLayerItemInternal, _PureComponent);\n  var _super = _createSuper(TextLayerItemInternal);\n  function TextLayerItemInternal() {\n    var _this;\n    _classCallCheck(this, TextLayerItemInternal);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"itemElement\", /*#__PURE__*/createRef());\n    _defineProperty(_assertThisInitialized(_this), \"getElementWidth\", function (element) {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n        sideways = _assertThisInitialize.sideways;\n      return element.getBoundingClientRect()[sideways ? 'height' : 'width'];\n    });\n    return _this;\n  }\n  _createClass(TextLayerItemInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.alignTextItem();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.alignTextItem();\n    }\n  }, {\n    key: \"unrotatedViewport\",\n    get: function get() {\n      var _this$props = this.props,\n        page = _this$props.page,\n        scale = _this$props.scale;\n      return page.getViewport({\n        scale: scale\n      });\n    }\n    /**\n     * It might happen that the page is rotated by default. In such cases, we shouldn't rotate\n     * text content.\n     */\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      var _this$props2 = this.props,\n        page = _this$props2.page,\n        rotate = _this$props2.rotate;\n      return rotate - page.rotate;\n    }\n  }, {\n    key: \"sideways\",\n    get: function get() {\n      var rotate = this.rotate;\n      return rotate % 180 !== 0;\n    }\n  }, {\n    key: \"defaultSideways\",\n    get: function get() {\n      var rotation = this.unrotatedViewport.rotation;\n      return rotation % 180 !== 0;\n    }\n  }, {\n    key: \"fontSize\",\n    get: function get() {\n      var transform = this.props.transform;\n      var defaultSideways = this.defaultSideways;\n      var _transform = _slicedToArray(transform, 2),\n        fontHeightPx = _transform[0],\n        fontWidthPx = _transform[1];\n      return defaultSideways ? fontWidthPx : fontHeightPx;\n    }\n  }, {\n    key: \"top\",\n    get: function get() {\n      var transform = this.props.transform;\n      var viewport = this.unrotatedViewport,\n        defaultSideways = this.defaultSideways;\n      var _transform2 = _slicedToArray(transform, 6),\n        /* fontHeightPx */\n\n        /* fontWidthPx */\n        offsetX = _transform2[2],\n        offsetY = _transform2[3],\n        x = _transform2[4],\n        y = _transform2[5];\n      var _viewport$viewBox = _slicedToArray(viewport.viewBox, 4),\n        /* xMin */\n        yMin\n        /* xMax */ = _viewport$viewBox[1],\n        yMax = _viewport$viewBox[3];\n      return defaultSideways ? x + offsetX + yMin : yMax - (y + offsetY);\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      var transform = this.props.transform;\n      var viewport = this.unrotatedViewport,\n        defaultSideways = this.defaultSideways;\n      var _transform3 = _slicedToArray(transform, 6),\n        /* fontHeightPx */\n\n        /* fontWidthPx */\n\n        /* offsetX */\n\n        /* offsetY */\n        x = _transform3[4],\n        y = _transform3[5];\n      var _viewport$viewBox2 = _slicedToArray(viewport.viewBox, 1),\n        xMin = _viewport$viewBox2[0];\n      return defaultSideways ? y - xMin : x - xMin;\n    }\n  }, {\n    key: \"getFontData\",\n    value: function getFontData(fontName) {\n      var page = this.props.page;\n      return new Promise(function (resolve) {\n        page.commonObjs.get(fontName, resolve);\n      });\n    }\n  }, {\n    key: \"alignTextItem\",\n    value: function alignTextItem() {\n      var _this2 = this;\n      var element = this.itemElement.current;\n      if (!element) {\n        return;\n      }\n      element.style.transform = '';\n      var _this$props3 = this.props,\n        fontName = _this$props3.fontName,\n        scale = _this$props3.scale,\n        width = _this$props3.width;\n      element.style.fontFamily = \"\".concat(fontName, \", sans-serif\");\n      this.getFontData(fontName).then(function (fontData) {\n        var fallbackFontName = fontData ? fontData.fallbackName : 'sans-serif';\n        element.style.fontFamily = \"\".concat(fontName, \", \").concat(fallbackFontName);\n        var targetWidth = width * scale;\n        var actualWidth = _this2.getElementWidth(element);\n        var transform = \"scaleX(\".concat(targetWidth / actualWidth, \")\");\n        var ascent = fontData ? fontData.ascent : 0;\n        if (ascent) {\n          transform += \" translateY(\".concat((1 - ascent) * 100, \"%)\");\n        }\n        element.style.transform = transform;\n        element.style.WebkitTransform = transform;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fontSize = this.fontSize,\n        top = this.top,\n        left = this.left;\n      var _this$props4 = this.props,\n        customTextRenderer = _this$props4.customTextRenderer,\n        scale = _this$props4.scale,\n        text = _this$props4.str;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.itemElement,\n        style: {\n          height: '1em',\n          fontFamily: 'sans-serif',\n          fontSize: \"\".concat(fontSize * scale, \"px\"),\n          position: 'absolute',\n          top: \"\".concat(top * scale, \"px\"),\n          left: \"\".concat(left * scale, \"px\"),\n          transformOrigin: 'left bottom',\n          whiteSpace: 'pre',\n          pointerEvents: 'all'\n        }\n      }, customTextRenderer ? customTextRenderer(this.props) : text);\n    }\n  }]);\n  return TextLayerItemInternal;\n}(PureComponent);\nTextLayerItemInternal.propTypes = {\n  customTextRenderer: PropTypes.func,\n  fontName: PropTypes.string.isRequired,\n  itemIndex: PropTypes.number.isRequired,\n  page: isPage.isRequired,\n  rotate: isRotate,\n  scale: PropTypes.number,\n  str: PropTypes.string.isRequired,\n  transform: PropTypes.arrayOf(PropTypes.number).isRequired,\n  width: PropTypes.number.isRequired\n};\nexport default function TextLayerItem(props) {\n  return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(TextLayerItemInternal, _extends({}, context, props));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}