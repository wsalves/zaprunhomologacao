{"ast":null,"code":"import io from\"socket.io-client\";class SocketWorker{constructor(companyId,userId){if(!SocketWorker.instance){this.companyId=companyId;this.userId=userId;this.socket=null;this.configureSocket();this.eventListeners={};// Armazena os ouvintes de eventos registrados\nSocketWorker.instance=this;}return SocketWorker.instance;}configureSocket(){this.socket=io(\"\".concat(process.env.REACT_APP_BACKEND_URL,\"/\").concat(this===null||this===void 0?void 0:this.companyId),{autoConnect:true,reconnection:true,reconnectionDelay:1000,reconnectionAttempts:Infinity,query:{userId:this.userId}});this.socket.on(\"connect\",()=>{});this.socket.on(\"disconnect\",()=>{this.reconnectAfterDelay();});}// Adiciona um ouvinte de eventos\non(event,callback){this.connect();this.socket.on(event,callback);// Armazena o ouvinte no objeto de ouvintes\nif(!this.eventListeners[event]){this.eventListeners[event]=[];}this.eventListeners[event].push(callback);}// Emite um evento\nemit(event,data){this.connect();this.socket.emit(event,data);}// Desconecta um ou mais ouvintes de eventos\noff(event,callback){this.connect();if(this.eventListeners[event]){if(callback){// Desconecta um ouvinte especÃ­fico\nthis.socket.off(event,callback);this.eventListeners[event]=this.eventListeners[event].filter(cb=>cb!==callback);}else{// Desconecta todos os ouvintes do evento\nthis.eventListeners[event].forEach(cb=>this.socket.off(event,cb));delete this.eventListeners[event];}}}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;this.instance=null;}}reconnectAfterDelay(){setTimeout(()=>{if(!this.socket||!this.socket.connected){this.connect();}},1000);}// Garante que o socket esteja conectado\nconnect(){if(!this.socket){this.configureSocket();}}forceReconnect(){}}// const instance = (companyId, userId) => new SocketWorker(companyId,userId);\nconst instance=(companyId,userId)=>new SocketWorker(companyId,userId);export default instance;","map":null,"metadata":{},"sourceType":"module"}