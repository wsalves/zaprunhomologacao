{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport { buildSearch } from './data';\nimport stringFromCodePoint from '../polyfills/stringFromCodePoint';\nimport { uncompress } from './data';\nvar COLONS_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/;\nvar SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\nfunction unifiedToNative(unified) {\n  var unicodes = unified.split('-'),\n    codePoints = unicodes.map(function (u) {\n      return \"0x\".concat(u);\n    });\n  return stringFromCodePoint.apply(null, codePoints);\n}\nfunction sanitize(emoji) {\n  var name = emoji.name,\n    short_names = emoji.short_names,\n    skin_tone = emoji.skin_tone,\n    skin_variations = emoji.skin_variations,\n    emoticons = emoji.emoticons,\n    unified = emoji.unified,\n    custom = emoji.custom,\n    customCategory = emoji.customCategory,\n    imageUrl = emoji.imageUrl,\n    id = emoji.id || short_names[0],\n    colons = \":\".concat(id, \":\");\n  if (custom) {\n    return {\n      id: id,\n      name: name,\n      short_names: short_names,\n      colons: colons,\n      emoticons: emoticons,\n      custom: custom,\n      customCategory: customCategory,\n      imageUrl: imageUrl\n    };\n  }\n  if (skin_tone) {\n    colons += \":skin-tone-\".concat(skin_tone, \":\");\n  }\n  return {\n    id: id,\n    name: name,\n    short_names: short_names,\n    colons: colons,\n    emoticons: emoticons,\n    unified: unified.toLowerCase(),\n    skin: skin_tone || (skin_variations ? 1 : null),\n    \"native\": unifiedToNative(unified)\n  };\n}\nfunction getSanitizedData() {\n  return sanitize(getData.apply(void 0, arguments));\n}\nfunction getData(emoji, skin, set, data) {\n  var emojiData = {};\n  if (typeof emoji == 'string') {\n    var matches = emoji.match(COLONS_REGEX);\n    if (matches) {\n      emoji = matches[1];\n      if (matches[2]) {\n        skin = parseInt(matches[2], 10);\n      }\n    }\n    if (data.aliases.hasOwnProperty(emoji)) {\n      emoji = data.aliases[emoji];\n    }\n    if (data.emojis.hasOwnProperty(emoji)) {\n      emojiData = data.emojis[emoji];\n    } else {\n      return null;\n    }\n  } else if (emoji.id) {\n    if (data.aliases.hasOwnProperty(emoji.id)) {\n      emoji.id = data.aliases[emoji.id];\n    }\n    if (data.emojis.hasOwnProperty(emoji.id)) {\n      emojiData = data.emojis[emoji.id];\n      skin || (skin = emoji.skin);\n    }\n  }\n  if (!Object.keys(emojiData).length) {\n    emojiData = emoji;\n    emojiData.custom = true;\n    if (!emojiData.search) {\n      emojiData.search = buildSearch(emoji);\n    }\n  }\n  emojiData.emoticons || (emojiData.emoticons = []);\n  emojiData.variations || (emojiData.variations = []);\n  if (emojiData.skin_variations && skin > 1) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    var skinKey = SKINS[skin - 1],\n      variationData = emojiData.skin_variations[skinKey];\n    if (variationData) {\n      if (!variationData.variations && emojiData.variations) {\n        delete emojiData.variations;\n      }\n      if (set && (variationData[\"has_img_\".concat(set)] == undefined || variationData[\"has_img_\".concat(set)]) || !set) {\n        emojiData.skin_tone = skin;\n        for (var k in variationData) {\n          var v = variationData[k];\n          emojiData[k] = v;\n        }\n      }\n    }\n  }\n  if (emojiData.variations && emojiData.variations.length) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    emojiData.unified = emojiData.variations.shift();\n  }\n  return emojiData;\n}\nfunction getEmojiDataFromNative(nativeString, set, data) {\n  if (data.compressed) {\n    uncompress(data);\n  }\n  var skinTones = ['🏻', '🏼', '🏽', '🏾', '🏿'];\n  var skinCodes = ['1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n  var skin;\n  var skinCode;\n  var baseNativeString = nativeString;\n  skinTones.forEach(function (skinTone, skinToneIndex) {\n    if (nativeString.indexOf(skinTone) > 0) {\n      skin = skinToneIndex + 2;\n      skinCode = skinCodes[skinToneIndex];\n    }\n  });\n  var emojiData;\n  for (var id in data.emojis) {\n    var emoji = data.emojis[id];\n    var emojiUnified = emoji.unified;\n    if (emoji.variations && emoji.variations.length) {\n      emojiUnified = emoji.variations.shift();\n    }\n    if (skin && emoji.skin_variations && emoji.skin_variations[skinCode]) {\n      emojiUnified = emoji.skin_variations[skinCode].unified;\n    }\n    if (unifiedToNative(emojiUnified) === baseNativeString) emojiData = emoji;\n  }\n  if (!emojiData) {\n    return null;\n  }\n  emojiData.id = emojiData.short_names[0];\n  return getSanitizedData(emojiData, skin, set, data);\n}\nfunction uniq(arr) {\n  return arr.reduce(function (acc, item) {\n    if (acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n}\nfunction intersect(a, b) {\n  var uniqA = uniq(a);\n  var uniqB = uniq(b);\n  return uniqA.filter(function (item) {\n    return uniqB.indexOf(item) >= 0;\n  });\n}\nfunction deepMerge(a, b) {\n  var o = {};\n  for (var key in a) {\n    var originalValue = a[key],\n      value = originalValue;\n    if (b.hasOwnProperty(key)) {\n      value = b[key];\n    }\n    if (_typeof(value) === 'object') {\n      value = deepMerge(originalValue, value);\n    }\n    o[key] = value;\n  }\n  return o;\n} // https://github.com/sonicdoe/measure-scrollbar\n\nfunction measureScrollbar() {\n  if (typeof document == 'undefined') return 0;\n  var div = document.createElement('div');\n  div.style.width = '100px';\n  div.style.height = '100px';\n  div.style.overflow = 'scroll';\n  div.style.position = 'absolute';\n  div.style.top = '-9999px';\n  document.body.appendChild(div);\n  var scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n} // Use requestIdleCallback() if available, else fall back to setTimeout().\n// Throttle so as not to run too frequently.\n\nfunction throttleIdleTask(func) {\n  var doIdleTask = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  var running = false;\n  return function throttled() {\n    if (running) {\n      return;\n    }\n    running = true;\n    doIdleTask(function () {\n      running = false;\n      func();\n    });\n  };\n}\nexport { getData, getEmojiDataFromNative, getSanitizedData, uniq, intersect, deepMerge, unifiedToNative, measureScrollbar, throttleIdleTask };","map":null,"metadata":{},"sourceType":"module"}