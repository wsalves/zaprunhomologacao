{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getData, getSanitizedData, unifiedToNative } from '../../utils';\nimport { uncompress } from '../../utils/data';\nimport { EmojiPropTypes } from '../../utils/shared-props';\nimport { EmojiDefaultProps } from '../../utils/shared-default-props';\nvar _getData = function _getData(props) {\n  var emoji = props.emoji,\n    skin = props.skin,\n    set = props.set,\n    data = props.data;\n  return getData(emoji, skin, set, data);\n};\nvar _getPosition = function _getPosition(props) {\n  var _getData2 = _getData(props),\n    sheet_x = _getData2.sheet_x,\n    sheet_y = _getData2.sheet_y,\n    multiplyX = 100 / (props.sheetColumns - 1),\n    multiplyY = 100 / (props.sheetRows - 1);\n  return \"\".concat(multiplyX * sheet_x, \"% \").concat(multiplyY * sheet_y, \"%\");\n};\nvar _getSanitizedData = function _getSanitizedData(props) {\n  var emoji = props.emoji,\n    skin = props.skin,\n    set = props.set,\n    data = props.data;\n  return getSanitizedData(emoji, skin, set, data);\n};\nvar _handleClick = function _handleClick(e, props) {\n  if (!props.onClick) {\n    return;\n  }\n  var onClick = props.onClick,\n    emoji = _getSanitizedData(props);\n  onClick(emoji, e);\n};\nvar _handleOver = function _handleOver(e, props) {\n  if (!props.onOver) {\n    return;\n  }\n  var onOver = props.onOver,\n    emoji = _getSanitizedData(props);\n  onOver(emoji, e);\n};\nvar _handleLeave = function _handleLeave(e, props) {\n  if (!props.onLeave) {\n    return;\n  }\n  var onLeave = props.onLeave,\n    emoji = _getSanitizedData(props);\n  onLeave(emoji, e);\n};\nvar _isNumeric = function _isNumeric(value) {\n  return !isNaN(value - parseFloat(value));\n};\nvar _convertStyleToCSS = function _convertStyleToCSS(style) {\n  var div = document.createElement('div');\n  for (var key in style) {\n    var value = style[key];\n    if (_isNumeric(value)) {\n      value += 'px';\n    }\n    div.style[key] = value;\n  }\n  return div.getAttribute('style');\n};\nvar NimbleEmoji = function NimbleEmoji(props) {\n  if (props.data.compressed) {\n    uncompress(props.data);\n  }\n  for (var k in NimbleEmoji.defaultProps) {\n    if (props[k] == undefined && NimbleEmoji.defaultProps[k] != undefined) {\n      props[k] = NimbleEmoji.defaultProps[k];\n    }\n  }\n  var data = _getData(props);\n  if (!data) {\n    if (props.fallback) {\n      return props.fallback(null, props);\n    } else {\n      return null;\n    }\n  }\n  var unified = data.unified,\n    custom = data.custom,\n    short_names = data.short_names,\n    imageUrl = data.imageUrl,\n    style = {},\n    children = props.children,\n    className = 'emoji-mart-emoji',\n    nativeEmoji = unified && unifiedToNative(unified),\n    label = [nativeEmoji].concat(short_names).filter(Boolean).join(', '),\n    title = null;\n  if (!unified && !custom) {\n    if (props.fallback) {\n      return props.fallback(data, props);\n    } else {\n      return null;\n    }\n  }\n  if (props.tooltip) {\n    title = short_names[0];\n  }\n  if (props[\"native\"] && unified) {\n    className += ' emoji-mart-emoji-native';\n    style = {\n      fontSize: props.size\n    };\n    children = nativeEmoji;\n    if (props.forceSize) {\n      style.display = 'inline-block';\n      style.width = props.size;\n      style.height = props.size;\n      style.wordBreak = 'keep-all';\n    }\n  } else if (custom) {\n    className += ' emoji-mart-emoji-custom';\n    style = {\n      width: props.size,\n      height: props.size,\n      display: 'inline-block'\n    };\n    if (data.spriteUrl) {\n      style = _objectSpread({}, style, {\n        backgroundImage: \"url(\".concat(data.spriteUrl, \")\"),\n        backgroundSize: \"\".concat(100 * props.sheetColumns, \"% \").concat(100 * props.sheetRows, \"%\"),\n        backgroundPosition: _getPosition(props)\n      });\n    } else {\n      style = _objectSpread({}, style, {\n        backgroundImage: \"url(\".concat(imageUrl, \")\"),\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center'\n      });\n    }\n  } else {\n    var setHasEmoji = data[\"has_img_\".concat(props.set)] == undefined || data[\"has_img_\".concat(props.set)];\n    if (!setHasEmoji) {\n      if (props.fallback) {\n        return props.fallback(data, props);\n      } else {\n        return null;\n      }\n    } else {\n      style = {\n        width: props.size,\n        height: props.size,\n        display: 'inline-block',\n        backgroundImage: \"url(\".concat(props.backgroundImageFn(props.set, props.sheetSize), \")\"),\n        backgroundSize: \"\".concat(100 * props.sheetColumns, \"% \").concat(100 * props.sheetRows, \"%\"),\n        backgroundPosition: _getPosition(props)\n      };\n    }\n  }\n  var Tag = {\n    name: 'span',\n    props: {}\n  };\n  if (props.onClick && props.useButton) {\n    Tag.name = 'button';\n    Tag.props = {\n      type: 'button'\n    };\n  }\n  if (props.html) {\n    style = _convertStyleToCSS(style);\n    return \"<\".concat(Tag.name, \" style='\").concat(style, \"' aria-label='\").concat(label, \"' \").concat(title ? \"title='\".concat(title, \"'\") : '', \" class='\").concat(className, \"'>\").concat(children || '', \"</\").concat(Tag.name, \">\");\n  } else {\n    return React.createElement(Tag.name, _extends({\n      onClick: function onClick(e) {\n        return _handleClick(e, props);\n      },\n      onMouseEnter: function onMouseEnter(e) {\n        return _handleOver(e, props);\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        return _handleLeave(e, props);\n      },\n      \"aria-label\": label,\n      title: title,\n      className: className\n    }, Tag.props), React.createElement(\"span\", {\n      style: style\n    }, children));\n  }\n};\nNimbleEmoji.propTypes\n/* remove-proptypes */ = _objectSpread({}, EmojiPropTypes, {\n  data: PropTypes.object.isRequired\n});\nNimbleEmoji.defaultProps = EmojiDefaultProps;\nexport default NimbleEmoji;","map":null,"metadata":{},"sourceType":"module"}