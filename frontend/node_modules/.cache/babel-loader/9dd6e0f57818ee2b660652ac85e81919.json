{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import{useDropzone}from\"react-dropzone\";import makeStyles from\"@material-ui/core/styles/makeStyles\";import{read,utils}from\"xlsx\";import{Button,FormControlLabel,FormGroup,MenuItem,Select,Switch,Table,TableBody,TableCell,TableContainer,TableHead,TableRow}from\"@material-ui/core\";import api from\"../../services/api\";import upload from\"../../assets/upload.gif\";import{useHistory}from\"react-router-dom\";import toastError from\"../../errors/toastError\";import useWindowDimensions from\"../../hooks/useWindowDimensions\";import{toast}from\"react-toastify\";function WorksheetToDatagrid(ws){/* create an array of arrays */const rows=utils.sheet_to_json(ws,{header:1,defval:\"\"});/* create column array */const range=utils.decode_range(ws[\"!ref\"]||\"A1\");const columns=Array.from({length:range.e.c+1},(_,i)=>({key:String(i),// RDG will access row[\"0\"], row[\"1\"], etc\nname:utils.encode_col(i)// the column labels will be A, B, etc\n//editor: textEditor // enable cell editing\n}));return{rows,columns};// these can be fed to setRows / setColumns\n}const useStyles=makeStyles(theme=>({xlsTable:{width:\"100%\"},tableContainer:{flex:1,padding:1,overflowX:\"auto\",overflowY:\"scroll\",...theme.scrollbarStyles},actions:{padding:2,border:\"1px solid #CCC\",boxShadow:\"1px 1px 5px #CCC\",marginTop:2,display:\"flex\",justifyContent:\"center\"},importOptions:{padding:2,border:\"1px solid #CCC\",boxShadow:\"1px 1px 5px #CCC\",marginTop:2,marginBottom:2},error:{color:\"red\",marginTop:1},buttonImport:{marginRight:1},select:{minWidth:200},backButtonContainer:{textAlign:\"center\",marginTop:20}}));const ContactImport=()=>{const size=useWindowDimensions();const[rows,setRows]=useState(null);const[columns,setColumns]=useState(null);const classes=useStyles();const history=useHistory();const[contactFieldsAvailable,setContactFieldsAvailable]=useState([]);const[columnValue,setColumnValue]=useState({});const[selectedFields,setSelectedFields]=useState({});// Para rastrear seleções únicas\nconst[openingFile,setOpeningFile]=useState(false);const[selection,setSelection]=useState({});const[invalidFile,setInvalidFile]=useState(false);const[error,setError]=useState(null);const[countCreated,setCountCreated]=useState(0);const[countIgnored,setCountIgnored]=useState(0);const[uploading,setUploading]=useState(false);const[imported,setImported]=useState(false);const[selectedRows,setSelectedRows]=useState({});const[validateContact,setValidateContact]=useState(false);const contactFields=[{id:\"name\",label:\"Nome\",required:true},{id:\"number\",label:\"Número\",required:true},{id:\"email\",label:\"E-mail\",required:false},{id:\"tags\",label:\"Tags\",required:false}];useEffect(()=>{setContactFieldsAvailable(contactFields);},[]);const processImport=async()=>{setUploading(true);console.log(selection);if(!selection.number){toastError(\"Não foi selecionado o campo de número do contato\");setUploading(false);return;}if(!selection.name){toastError(\"Não foi selecionado o campo de nome do contato\");setUploading(false);return;}if(Object.keys(selectedRows).length===0){toastError(\"Nenhum contato selecionado\");setUploading(false);return;}if((rows===null||rows===void 0?void 0:rows.length)>1){for(let index=1;index<rows.length;index++){if(selectedRows[index]){// Importar apenas as linhas selecionadas\nconst item=rows[index];const contactData={};for(let columnIndex=0;columnIndex<columns.length;columnIndex++){const column=columns[columnIndex];const selectedField=columnValue[column.key];if(selectedField){contactData[selectedField]=item[columnIndex];}}// Verificar se os campos obrigatórios estão presentes\nconst missingRequiredFields=contactFields.some(field=>field.required&&!contactData[field.id]);if(missingRequiredFields){setCountIgnored(prevCount=>prevCount+1);continue;}try{const data=await api.post('/contactsImport',{...contactData,validateContact:validateContact?\"true\":\"false\"});if(data.status===200){setCountCreated(prevCount=>prevCount+1);}else{setCountIgnored(prevCount=>prevCount+1);}}catch(error){setCountIgnored(prevCount=>prevCount+1);}}}setValidateContact(false);setSelectedRows({});setImported(true);setUploading(false);if(countIgnored===0){toast.success(\"Importação realizada com sucesso\");}else{toast.alert(\"Importação realizada com sucesso, mas houveram alguns erros\");}}};const onChangeFile=acceptedFiles=>{if(acceptedFiles.length===0)return;setOpeningFile(true);setInvalidFile(false);setImported(false);setUploading(false);const file=acceptedFiles[0];const reader=new FileReader();reader.onload=function(e){try{const data=e.target.result;const wb=read(data);const ws=wb.Sheets[wb.SheetNames[0]];const{rows,columns}=WorksheetToDatagrid(ws);setRows(rows);setColumns(columns);setOpeningFile(false);}catch(e){console.error(e);setInvalidFile(true);setOpeningFile(false);}};reader.readAsArrayBuffer(file);};const handleSelectChange=event=>{const newValue=event.target.value;const columnKey=event.target.name;// Remover antiga seleção\nif(columnValue[columnKey]){const oldValue=columnValue[columnKey];setSelectedFields(prevSelectedFields=>{const newSelectedFields={...prevSelectedFields};delete newSelectedFields[oldValue];return newSelectedFields;});}// Se o novo valor for vazio, limpar a seleção\nif(newValue===\"\"){setColumnValue(prevColumnValue=>{const newColumnValue={...prevColumnValue};delete newColumnValue[columnKey];return newColumnValue;});setSelection(prevSelection=>{const newSelection={...prevSelection};Object.keys(newSelection).forEach(key=>{if(newSelection[key]===columnKey){delete newSelection[key];}});return newSelection;});return;}// Verificar se o novo valor já foi selecionado\nif(selectedFields[newValue]){toastError(\"O campo \".concat(newValue,\" j\\xE1 foi selecionado.\"));return;}// Atualizar seleção\nsetSelection(selection=>({...selection,[newValue]:columnKey}));setSelectedFields(prevSelectedFields=>({...prevSelectedFields,[newValue]:columnKey}));setColumnValue(columnValue=>({...columnValue,[columnKey]:newValue}));};const renderSelectbox=column=>{return/*#__PURE__*/React.createElement(Select,{value:columnValue[column.key],name:column.key,onChange:handleSelectChange},/*#__PURE__*/React.createElement(MenuItem,{value:\"\"},\"\\xA0\"),contactFieldsAvailable.map(contactField=>/*#__PURE__*/React.createElement(MenuItem,{value:contactField.id},contactField.label)));};const renderXls=()=>{return/*#__PURE__*/React.createElement(TableContainer,{className:classes.tableContainer,style:{height:size.height*0.75}},/*#__PURE__*/React.createElement(Table,{stickyHeader:true},/*#__PURE__*/React.createElement(TableHead,{key:columns.length},/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:Object.keys(selectedRows).length===rows.length-1// Se todas as linhas, exceto a primeira, estiverem marcadas\n,onChange:event=>{const isChecked=event.target.checked;const newSelectedRows={};if(isChecked){// Marcar todas as linhas, exceto a primeira\nfor(let i=1;i<rows.length;i++){newSelectedRows[i]=true;}}setSelectedRows(newSelectedRows);}})),columns.map(column=>/*#__PURE__*/React.createElement(TableCell,{key:column.key},column.name))),/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,null),columns.map(column=>/*#__PURE__*/React.createElement(TableCell,{key:column.key},renderSelectbox(column))))),/*#__PURE__*/React.createElement(TableBody,null,rows.map((row,rowIndex)=>/*#__PURE__*/React.createElement(TableRow,{key:rowIndex},rowIndex!==0&&/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:!!selectedRows[rowIndex],onChange:()=>{setSelectedRows(prevSelectedRows=>({...prevSelectedRows,[rowIndex]:!prevSelectedRows[rowIndex]}));}})),rowIndex!==0&&row.map((column,columnIndex)=>/*#__PURE__*/React.createElement(TableCell,{key:columnIndex},column)))))));};const handleCloseImport=async()=>{try{history.push(\"/contacts\");}catch(err){toastError(err);}};const renderContent=()=>{return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.importOptions},/*#__PURE__*/React.createElement(FormGroup,{row:true,style:{width:'100%',display:'flex',justifyContent:'space-around'}},/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Switch,{checked:validateContact,onChange:event=>setValidateContact(event.target.checked),color:\"primary\"}),label:\"Validar contatos no WhatsApp\"}))),renderXls(),/*#__PURE__*/React.createElement(\"div\",{className:classes.actions},uploading&&/*#__PURE__*/React.createElement(\"div\",null,\"Importando... Aguarde\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",disabled:uploading,className:classes.buttonImport,onClick:()=>processImport()},\"Importar contatos\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",disabled:uploading,onClick:()=>{setRows(null);setColumns(null);}},\"Cancelar\"),error&&/*#__PURE__*/React.createElement(\"div\",{className:classes.error},error)));};const{getRootProps,getInputProps}=useDropzone({onDrop:onChangeFile,maxFiles:1});return/*#__PURE__*/React.createElement(\"div\",{style:{alignContent:\"center\"}},imported&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,countCreated,\" contatos criados\"),/*#__PURE__*/React.createElement(\"li\",null,countIgnored,\" contatos ignorados (n\\xFAmero inv\\xE1lido ou n\\xE3o marcados para atualizar)\"))),openingFile&&/*#__PURE__*/React.createElement(\"div\",null,\"Processando arquivo...\"),invalidFile&&/*#__PURE__*/React.createElement(\"div\",null,\"Arquivo inv\\xE1lido!\"),!imported&&rows&&columns?renderContent():/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",Object.assign({},getRootProps(),{className:\"uploaderDrop\",style:{borderRadius:20,maxWidth:500,margin:\"20px auto\",border:\"3px dotted #ddd\",padding:20,display:\"flex\",justifyContent:\"center\",alignItems:\"center\",flexDirection:\"column\"}}),/*#__PURE__*/React.createElement(\"img\",{src:upload,height:200,alt:\"Upload\"}),/*#__PURE__*/React.createElement(\"h5\",null,\"Clique ou arraste um arquivo\"),/*#__PURE__*/React.createElement(\"p\",{style:{color:\"#e74c3c\",fontWeight:\"bold\",textAlign:\"center\"}},\"* Importante: Arquivos somente com extens\\xF5es s\\xE3o aceitas: xls, xslx, csv, txt\")),/*#__PURE__*/React.createElement(\"input\",getInputProps()),/*#__PURE__*/React.createElement(\"div\",{className:classes.backButtonContainer},/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",disabled:uploading,onClick:handleCloseImport},\"Voltar\"))));};export default ContactImport;","map":null,"metadata":{},"sourceType":"module"}