{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _trelloSmoothDnd = _interopRequireWildcard(require(\"trello-smooth-dnd\"));\n_trelloSmoothDnd.default.dropHandler = _trelloSmoothDnd.dropHandlers.reactDropHandler().handler;\n_trelloSmoothDnd.default.wrapChild = p => p; // dont wrap children they will already be wrapped\n\nclass Container extends _react.Component {\n  constructor(props) {\n    super(props);\n    this.getContainerOptions = this.getContainerOptions.bind(this);\n    this.setRef = this.setRef.bind(this);\n    this.prevContainer = null;\n  }\n  componentDidMount() {\n    this.containerDiv = this.containerDiv || _reactDom.default.findDOMNode(this);\n    this.prevContainer = this.containerDiv;\n    this.container = (0, _trelloSmoothDnd.default)(this.containerDiv, this.getContainerOptions());\n  }\n  componentWillUnmount() {\n    this.container.dispose();\n    this.container = null;\n  }\n  componentDidUpdate() {\n    this.containerDiv = this.containerDiv || _reactDom.default.findDOMNode(this);\n    if (this.containerDiv) {\n      if (this.prevContainer && this.prevContainer !== this.containerDiv) {\n        this.container.dispose();\n        this.container = (0, _trelloSmoothDnd.default)(this.containerDiv, this.getContainerOptions());\n        this.prevContainer = this.containerDiv;\n      }\n    }\n  }\n  render() {\n    if (this.props.render) {\n      return this.props.render(this.setRef);\n    } else {\n      return _react.default.createElement(\"div\", {\n        style: this.props.style,\n        ref: this.setRef\n      }, this.props.children);\n    }\n  }\n  setRef(element) {\n    this.containerDiv = element;\n  }\n  getContainerOptions() {\n    var _this = this;\n    const functionProps = {};\n    if (this.props.onDragStart) {\n      functionProps.onDragStart = function () {\n        return _this.props.onDragStart(...arguments);\n      };\n    }\n    if (this.props.onDragEnd) {\n      functionProps.onDragEnd = function () {\n        return _this.props.onDragEnd(...arguments);\n      };\n    }\n    if (this.props.onDrop) {\n      functionProps.onDrop = function () {\n        return _this.props.onDrop(...arguments);\n      };\n    }\n    if (this.props.getChildPayload) {\n      functionProps.getChildPayload = function () {\n        return _this.props.getChildPayload(...arguments);\n      };\n    }\n    if (this.props.shouldAnimateDrop) {\n      functionProps.shouldAnimateDrop = function () {\n        return _this.props.shouldAnimateDrop(...arguments);\n      };\n    }\n    if (this.props.shouldAcceptDrop) {\n      functionProps.shouldAcceptDrop = function () {\n        return _this.props.shouldAcceptDrop(...arguments);\n      };\n    }\n    if (this.props.onDragEnter) {\n      functionProps.onDragEnter = function () {\n        return _this.props.onDragEnter(...arguments);\n      };\n    }\n    if (this.props.onDragLeave) {\n      functionProps.onDragLeave = function () {\n        return _this.props.onDragLeave(...arguments);\n      };\n    }\n    if (this.props.render) {\n      functionProps.render = function () {\n        return _this.props.render(...arguments);\n      };\n    }\n    if (this.props.onDropReady) {\n      functionProps.onDropReady = function () {\n        return _this.props.onDropReady(...arguments);\n      };\n    }\n    if (this.props.getGhostParent) {\n      functionProps.getGhostParent = function () {\n        return _this.props.getGhostParent(...arguments);\n      };\n    }\n    return Object.assign({}, this.props, functionProps);\n  }\n}\nContainer.propTypes = {\n  behaviour: _propTypes.default.oneOf([\"move\", \"copy\", \"drag-zone\"]),\n  groupName: _propTypes.default.string,\n  orientation: _propTypes.default.oneOf([\"horizontal\", \"vertical\"]),\n  style: _propTypes.default.object,\n  dragHandleSelector: _propTypes.default.string,\n  className: _propTypes.default.string,\n  nonDragAreaSelector: _propTypes.default.string,\n  dragBeginDelay: _propTypes.default.number,\n  animationDuration: _propTypes.default.number,\n  autoScrollEnabled: _propTypes.default.string,\n  lockAxis: _propTypes.default.string,\n  dragClass: _propTypes.default.string,\n  dropClass: _propTypes.default.string,\n  onDragStart: _propTypes.default.func,\n  onDragEnd: _propTypes.default.func,\n  onDrop: _propTypes.default.func,\n  getChildPayload: _propTypes.default.func,\n  shouldAnimateDrop: _propTypes.default.func,\n  shouldAcceptDrop: _propTypes.default.func,\n  onDragEnter: _propTypes.default.func,\n  onDragLeave: _propTypes.default.func,\n  render: _propTypes.default.func,\n  getGhostParent: _propTypes.default.func,\n  removeOnDropOut: _propTypes.default.bool\n};\nContainer.defaultProps = {\n  behaviour: 'move',\n  orientation: 'vertical',\n  className: 'reactTrelloBoard'\n};\nvar _default = Container;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}