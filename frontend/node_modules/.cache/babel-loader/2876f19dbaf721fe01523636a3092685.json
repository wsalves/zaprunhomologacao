{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar react = require('react');\nfunction createContext() {\n  var ZustandContext = react.createContext(undefined);\n  var Provider = function Provider(_ref) {\n    var initialStore = _ref.initialStore,\n      createStore = _ref.createStore,\n      children = _ref.children;\n    var storeRef = react.useRef();\n    if (!storeRef.current) {\n      if (initialStore) {\n        console.warn('Provider initialStore is deprecated and will be removed in the next version.');\n        if (!createStore) {\n          createStore = function createStore() {\n            return initialStore;\n          };\n        }\n      }\n      storeRef.current = createStore();\n    }\n    return react.createElement(ZustandContext.Provider, {\n      value: storeRef.current\n    }, children);\n  };\n  var useStore = function useStore(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = Object.is;\n    }\n    var useProviderStore = react.useContext(ZustandContext);\n    if (!useProviderStore) {\n      throw new Error('Seems like you have not used zustand provider as an ancestor.');\n    }\n    return useProviderStore(selector, equalityFn);\n  };\n  var useStoreApi = function useStoreApi() {\n    var useProviderStore = react.useContext(ZustandContext);\n    if (!useProviderStore) {\n      throw new Error('Seems like you have not used zustand provider as an ancestor.');\n    }\n    return react.useMemo(function () {\n      return {\n        getState: useProviderStore.getState,\n        setState: useProviderStore.setState,\n        subscribe: useProviderStore.subscribe,\n        destroy: useProviderStore.destroy\n      };\n    }, [useProviderStore]);\n  };\n  return {\n    Provider: Provider,\n    useStore: useStore,\n    useStoreApi: useStoreApi\n  };\n}\nexports[\"default\"] = createContext;","map":null,"metadata":{},"sourceType":"script"}