{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import{useHistory}from\"react-router-dom\";import Button from\"@material-ui/core/Button\";import TextField from\"@material-ui/core/TextField\";import Dialog from\"@material-ui/core/Dialog\";import Select from\"@material-ui/core/Select\";import FormControl from\"@material-ui/core/FormControl\";import InputLabel from\"@material-ui/core/InputLabel\";import MenuItem from\"@material-ui/core/MenuItem\";import{Grid,makeStyles}from\"@material-ui/core\";import DialogActions from\"@material-ui/core/DialogActions\";import DialogContent from\"@material-ui/core/DialogContent\";import DialogTitle from\"@material-ui/core/DialogTitle\";import Autocomplete,{createFilterOptions}from\"@material-ui/lab/Autocomplete\";import CircularProgress from\"@material-ui/core/CircularProgress\";import{i18n}from\"../../translate/i18n\";import api from\"../../services/api\";import ButtonWithSpinner from\"../ButtonWithSpinner\";import toastError from\"../../errors/toastError\";import useQueues from\"../../hooks/useQueues\";import UserStatusIcon from\"../UserModal/statusIcon\";import{isNil}from\"lodash\";const useStyles=makeStyles(theme=>({maxWidth:{width:\"100%\"}}));const filterOptions=createFilterOptions({trim:true});const TransferTicketModalCustom=_ref=>{let{modalOpen,onClose,ticketid,ticket}=_ref;const history=useHistory();const[options,setOptions]=useState([]);const[queues,setQueues]=useState([]);const[allQueues,setAllQueues]=useState([]);const[loading,setLoading]=useState(false);const[searchParam,setSearchParam]=useState(\"\");const[selectedUser,setSelectedUser]=useState(null);const[selectedQueue,setSelectedQueue]=useState(\"\");const classes=useStyles();const{findAll:findAllQueues}=useQueues();const isMounted=useRef(true);const[msgTransfer,setMsgTransfer]=useState('');useEffect(()=>{return()=>{isMounted.current=false;};},[]);useEffect(()=>{if(isMounted.current){const loadQueues=async()=>{const list=await findAllQueues();setAllQueues(list);setQueues(list);};loadQueues();}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{if(!modalOpen||searchParam.length<3){setLoading(false);setSelectedQueue(\"\");return;}const delayDebounceFn=setTimeout(()=>{setLoading(true);const fetchUsers=async()=>{try{const{data}=await api.get(\"/users/\",{params:{searchParam}});setOptions(data.users);setLoading(false);}catch(err){setLoading(false);toastError(err);}};fetchUsers();},500);return()=>clearTimeout(delayDebounceFn);},[searchParam,modalOpen]);const handleMsgTransferChange=event=>{setMsgTransfer(event.target.value);};const handleClose=()=>{onClose();setSearchParam(\"\");setSelectedUser(null);};const handleSaveTicket=async e=>{// e.preventDefault();\nif(!ticketid)return;if(!selectedQueue||selectedQueue===\"\")return;setLoading(true);try{let data={};data.userId=!selectedUser?null:selectedUser.id;data.status=!selectedUser?\"pending\":ticket.isGroup?\"group\":\"open\";data.queueId=selectedQueue;data.msgTransfer=msgTransfer?msgTransfer:null;data.isTransfered=true;await api.put(\"/tickets/\".concat(ticketid),data);setLoading(false);history.push(\"/tickets/\");handleClose();}catch(err){setLoading(false);toastError(err);}};return/*#__PURE__*/React.createElement(Dialog,{open:modalOpen,onClose:handleClose,maxWidth:\"md\",fullWidth:true,scroll:\"paper\"},/*#__PURE__*/React.createElement(DialogTitle,{id:\"form-dialog-title\"},i18n.t(\"transferTicketModal.title\")),/*#__PURE__*/React.createElement(DialogContent,{dividers:true},/*#__PURE__*/React.createElement(Grid,{container:true,spacing:2},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6,xl:6},/*#__PURE__*/React.createElement(Autocomplete,{fullWidth:true,getOptionLabel:option=>\"\".concat(option.name),onChange:(e,newValue)=>{setSelectedUser(newValue);if(newValue!=null&&Array.isArray(newValue.queues)){if(newValue.queues.length===1){setSelectedQueue(newValue.queues[0].id);}setQueues(newValue.queues);}else{setQueues(allQueues);setSelectedQueue(\"\");}},options:options,filterOptions:filterOptions,freeSolo:true,autoHighlight:true,noOptionsText:i18n.t(\"transferTicketModal.noOptions\"),loading:loading,renderOption:option=>/*#__PURE__*/React.createElement(\"span\",null,\" \",/*#__PURE__*/React.createElement(UserStatusIcon,{user:option}),\" \",option.name),renderInput:params=>/*#__PURE__*/React.createElement(TextField,Object.assign({},params,{label:i18n.t(\"transferTicketModal.fieldLabel\"),variant:\"outlined\",autoFocus:true,onChange:e=>setSearchParam(e.target.value),InputProps:{...params.InputProps,endAdornment:/*#__PURE__*/React.createElement(React.Fragment,null,loading?/*#__PURE__*/React.createElement(CircularProgress,{color:\"inherit\",size:20}):null,params.InputProps.endAdornment)}}))})),/*#__PURE__*/React.createElement(Grid,{xs:12,sm:6,xl:6,item:true},/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",fullWidth:true},/*#__PURE__*/React.createElement(InputLabel,null,i18n.t(\"transferTicketModal.fieldQueueLabel\")),/*#__PURE__*/React.createElement(Select,{value:selectedQueue,onChange:e=>setSelectedQueue(e.target.value),label:i18n.t(\"transferTicketModal.fieldQueuePlaceholder\")},queues.map(queue=>/*#__PURE__*/React.createElement(MenuItem,{key:queue.id,value:queue.id},queue.name)))))),/*#__PURE__*/React.createElement(Grid,{container:true,spacing:2},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:12,xl:12},/*#__PURE__*/React.createElement(TextField,{label:i18n.t(\"transferTicketModal.msgTransfer\"),value:msgTransfer,onChange:handleMsgTransferChange,variant:\"outlined\",multiline:true,maxRows:5,minRows:5,fullWidth:true})))),/*#__PURE__*/React.createElement(DialogActions,null,/*#__PURE__*/React.createElement(Button,{onClick:handleClose,color:\"secondary\",disabled:loading,variant:\"outlined\"},i18n.t(\"transferTicketModal.buttons.cancel\")),/*#__PURE__*/React.createElement(ButtonWithSpinner,{variant:\"contained\",type:\"submit\",color:\"primary\",loading:loading,disabled:selectedQueue===\"\",onClick:()=>handleSaveTicket(selectedQueue)},i18n.t(\"transferTicketModal.buttons.ok\"))));};export default TransferTicketModalCustom;","map":null,"metadata":{},"sourceType":"module"}