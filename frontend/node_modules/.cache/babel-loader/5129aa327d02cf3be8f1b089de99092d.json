{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _redux = require(\"redux\");\nvar _reactRedux = require(\"react-redux\");\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _cloneDeep = _interopRequireDefault(require(\"lodash/cloneDeep\"));\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\nvar _v = _interopRequireDefault(require(\"uuid/v1\"));\nvar _Container = _interopRequireDefault(require(\"../dnd/Container\"));\nvar _Draggable = _interopRequireDefault(require(\"../dnd/Draggable\"));\nvar laneActions = _interopRequireWildcard(require(\"../actions/LaneActions\"));\nclass Lane extends _react.Component {\n  constructor() {\n    super(...arguments);\n    (0, _defineProperty2.default)(this, \"state\", {\n      loading: false,\n      currentPage: this.props.currentPage,\n      addCardMode: false,\n      collapsed: false,\n      isDraggingOver: false\n    });\n    (0, _defineProperty2.default)(this, \"handleScroll\", evt => {\n      const node = evt.target;\n      const elemScrollPosition = node.scrollHeight - node.scrollTop - node.clientHeight;\n      const onLaneScroll = this.props.onLaneScroll; // In some browsers and/or screen sizes a decimal rest value between 0 and 1 exists, so it should be checked on < 1 instead of < 0\n\n      if (elemScrollPosition < 1 && onLaneScroll && !this.state.loading) {\n        const currentPage = this.state.currentPage;\n        this.setState({\n          loading: true\n        });\n        const nextPage = currentPage + 1;\n        onLaneScroll(nextPage, this.props.id).then(moreCards => {\n          if ((moreCards || []).length > 0) {\n            this.props.actions.paginateLane({\n              laneId: this.props.id,\n              newCards: moreCards,\n              nextPage: nextPage\n            });\n          }\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    });\n    (0, _defineProperty2.default)(this, \"laneDidMount\", node => {\n      if (node) {\n        node.addEventListener('scroll', this.handleScroll);\n      }\n    });\n    (0, _defineProperty2.default)(this, \"removeCard\", cardId => {\n      if (this.props.onBeforeCardDelete && typeof this.props.onBeforeCardDelete === 'function') {\n        this.props.onBeforeCardDelete(() => {\n          this.props.onCardDelete && this.props.onCardDelete(cardId, this.props.id);\n          this.props.actions.removeCard({\n            laneId: this.props.id,\n            cardId: cardId\n          });\n        });\n      } else {\n        this.props.onCardDelete && this.props.onCardDelete(cardId, this.props.id);\n        this.props.actions.removeCard({\n          laneId: this.props.id,\n          cardId: cardId\n        });\n      }\n    });\n    (0, _defineProperty2.default)(this, \"handleCardClick\", (e, card) => {\n      const onCardClick = this.props.onCardClick;\n      onCardClick && onCardClick(card.id, card.metadata, card.laneId);\n      e.stopPropagation();\n    });\n    (0, _defineProperty2.default)(this, \"showEditableCard\", () => {\n      this.setState({\n        addCardMode: true\n      });\n    });\n    (0, _defineProperty2.default)(this, \"hideEditableCard\", () => {\n      this.setState({\n        addCardMode: false\n      });\n    });\n    (0, _defineProperty2.default)(this, \"addNewCard\", params => {\n      const laneId = this.props.id;\n      const id = (0, _v.default)();\n      this.hideEditableCard();\n      let card = (0, _objectSpread2.default)({\n        id\n      }, params);\n      this.props.actions.addCard({\n        laneId,\n        card\n      });\n      this.props.onCardAdd(card, laneId);\n    });\n    (0, _defineProperty2.default)(this, \"onDragStart\", _ref => {\n      let {\n        payload\n      } = _ref;\n      const handleDragStart = this.props.handleDragStart;\n      handleDragStart && handleDragStart(payload.id, payload.laneId);\n    });\n    (0, _defineProperty2.default)(this, \"shouldAcceptDrop\", sourceContainerOptions => {\n      return this.props.droppable && sourceContainerOptions.groupName === this.groupName;\n    });\n    (0, _defineProperty2.default)(this, \"onDragEnd\", (laneId, result) => {\n      const handleDragEnd = this.props.handleDragEnd;\n      const addedIndex = result.addedIndex,\n        payload = result.payload;\n      if (this.state.isDraggingOver) {\n        this.setState({\n          isDraggingOver: false\n        });\n      }\n      if (addedIndex != null) {\n        const newCard = (0, _objectSpread2.default)({}, (0, _cloneDeep.default)(payload), {\n          laneId\n        });\n        const response = handleDragEnd ? handleDragEnd(payload.id, payload.laneId, laneId, addedIndex, newCard) : true;\n        if (response === undefined || !!response) {\n          this.props.actions.moveCardAcrossLanes({\n            fromLaneId: payload.laneId,\n            toLaneId: laneId,\n            cardId: payload.id,\n            index: addedIndex\n          });\n          this.props.onCardMoveAcrossLanes(payload.laneId, laneId, payload.id, addedIndex);\n        }\n        return response;\n      }\n    });\n    (0, _defineProperty2.default)(this, \"updateCard\", updatedCard => {\n      this.props.actions.updateCard({\n        laneId: this.props.id,\n        card: updatedCard\n      });\n      this.props.onCardUpdate(this.props.id, updatedCard);\n    });\n    (0, _defineProperty2.default)(this, \"renderDragContainer\", isDraggingOver => {\n      const _this$props = this.props,\n        id = _this$props.id,\n        cards = _this$props.cards,\n        laneSortFunction = _this$props.laneSortFunction,\n        editable = _this$props.editable,\n        hideCardDeleteIcon = _this$props.hideCardDeleteIcon,\n        cardDraggable = _this$props.cardDraggable,\n        cardDragClass = _this$props.cardDragClass,\n        cardDropClass = _this$props.cardDropClass,\n        tagStyle = _this$props.tagStyle,\n        cardStyle = _this$props.cardStyle,\n        components = _this$props.components,\n        t = _this$props.t;\n      const _this$state = this.state,\n        addCardMode = _this$state.addCardMode,\n        collapsed = _this$state.collapsed;\n      const showableCards = collapsed ? [] : cards;\n      const cardList = this.sortCards(showableCards, laneSortFunction).map((card, idx) => {\n        const onDeleteCard = () => this.removeCard(card.id);\n        const cardToRender = _react.default.createElement(components.Card, (0, _extends2.default)({\n          key: card.id,\n          index: idx,\n          style: card.style || cardStyle,\n          className: \"react-trello-card\",\n          onDelete: onDeleteCard,\n          onClick: e => this.handleCardClick(e, card),\n          onChange: updatedCard => this.updateCard(updatedCard),\n          showDeleteButton: !hideCardDeleteIcon,\n          tagStyle: tagStyle,\n          cardDraggable: cardDraggable,\n          editable: editable,\n          t: t\n        }, card));\n        return cardDraggable && (!card.hasOwnProperty('draggable') || card.draggable) ? _react.default.createElement(_Draggable.default, {\n          key: card.id\n        }, cardToRender) : _react.default.createElement(\"span\", {\n          key: card.id\n        }, cardToRender);\n      });\n      return _react.default.createElement(components.ScrollableLane, {\n        ref: this.laneDidMount,\n        isDraggingOver: isDraggingOver\n      }, _react.default.createElement(_Container.default, {\n        orientation: \"vertical\",\n        groupName: this.groupName,\n        dragClass: cardDragClass,\n        dropClass: cardDropClass,\n        onDragStart: this.onDragStart,\n        onDrop: e => this.onDragEnd(id, e),\n        onDragEnter: () => this.setState({\n          isDraggingOver: true\n        }),\n        onDragLeave: () => this.setState({\n          isDraggingOver: false\n        }),\n        shouldAcceptDrop: this.shouldAcceptDrop,\n        getChildPayload: index => this.props.getCardDetails(id, index)\n      }, cardList), editable && !addCardMode && _react.default.createElement(components.AddCardLink, {\n        onClick: this.showEditableCard,\n        t: t,\n        laneId: id\n      }), addCardMode && _react.default.createElement(components.NewCardForm, {\n        onCancel: this.hideEditableCard,\n        t: t,\n        laneId: id,\n        onAdd: this.addNewCard\n      }));\n    });\n    (0, _defineProperty2.default)(this, \"removeLane\", () => {\n      const id = this.props.id;\n      this.props.actions.removeLane({\n        laneId: id\n      });\n      this.props.onLaneDelete(id);\n    });\n    (0, _defineProperty2.default)(this, \"updateTitle\", value => {\n      this.props.actions.updateLane({\n        id: this.props.id,\n        title: value\n      });\n      this.props.onLaneUpdate(this.props.id, {\n        title: value\n      });\n    });\n    (0, _defineProperty2.default)(this, \"renderHeader\", pickedProps => {\n      const components = this.props.components;\n      return _react.default.createElement(components.LaneHeader, (0, _extends2.default)({}, pickedProps, {\n        onDelete: this.removeLane,\n        onDoubleClick: this.toggleLaneCollapsed,\n        updateTitle: this.updateTitle\n      }));\n    });\n    (0, _defineProperty2.default)(this, \"toggleLaneCollapsed\", () => {\n      this.props.collapsibleLanes && this.setState(state => ({\n        collapsed: !state.collapsed\n      }));\n    });\n  }\n  sortCards(cards, sortFunction) {\n    if (!cards) return [];\n    if (!sortFunction) return cards;\n    return cards.concat().sort(function (card1, card2) {\n      return sortFunction(card1, card2);\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!(0, _isEqual.default)(this.props.cards, nextProps.cards)) {\n      this.setState({\n        currentPage: nextProps.currentPage\n      });\n    }\n  }\n  get groupName() {\n    const boardId = this.props.boardId;\n    return \"TrelloBoard\".concat(boardId, \"Lane\");\n  }\n  render() {\n    const _this$state2 = this.state,\n      loading = _this$state2.loading,\n      isDraggingOver = _this$state2.isDraggingOver,\n      collapsed = _this$state2.collapsed;\n    const _this$props2 = this.props,\n      id = _this$props2.id,\n      cards = _this$props2.cards,\n      collapsibleLanes = _this$props2.collapsibleLanes,\n      components = _this$props2.components,\n      onLaneClick = _this$props2.onLaneClick,\n      onLaneScroll = _this$props2.onLaneScroll,\n      onCardClick = _this$props2.onCardClick,\n      onCardAdd = _this$props2.onCardAdd,\n      onBeforeCardDelete = _this$props2.onBeforeCardDelete,\n      onCardDelete = _this$props2.onCardDelete,\n      onLaneDelete = _this$props2.onLaneDelete,\n      onLaneUpdate = _this$props2.onLaneUpdate,\n      onCardUpdate = _this$props2.onCardUpdate,\n      onCardMoveAcrossLanes = _this$props2.onCardMoveAcrossLanes,\n      otherProps = (0, _objectWithoutProperties2.default)(_this$props2, [\"id\", \"cards\", \"collapsibleLanes\", \"components\", \"onLaneClick\", \"onLaneScroll\", \"onCardClick\", \"onCardAdd\", \"onBeforeCardDelete\", \"onCardDelete\", \"onLaneDelete\", \"onLaneUpdate\", \"onCardUpdate\", \"onCardMoveAcrossLanes\"]);\n    const allClassNames = (0, _classnames.default)('react-trello-lane', this.props.className || '');\n    const showFooter = collapsibleLanes && cards.length > 0;\n    return _react.default.createElement(components.Section, (0, _extends2.default)({}, otherProps, {\n      key: id,\n      onClick: () => onLaneClick && onLaneClick(id),\n      draggable: false,\n      className: allClassNames\n    }), this.renderHeader((0, _objectSpread2.default)({\n      id,\n      cards\n    }, otherProps)), this.renderDragContainer(isDraggingOver), loading && _react.default.createElement(components.Loader, null), showFooter && _react.default.createElement(components.LaneFooter, {\n      onClick: this.toggleLaneCollapsed,\n      collapsed: collapsed\n    }));\n  }\n}\nLane.propTypes = {\n  actions: _propTypes.default.object,\n  id: _propTypes.default.string.isRequired,\n  boardId: _propTypes.default.string,\n  title: _propTypes.default.node,\n  index: _propTypes.default.number,\n  laneSortFunction: _propTypes.default.func,\n  style: _propTypes.default.object,\n  cardStyle: _propTypes.default.object,\n  tagStyle: _propTypes.default.object,\n  titleStyle: _propTypes.default.object,\n  labelStyle: _propTypes.default.object,\n  cards: _propTypes.default.array,\n  label: _propTypes.default.string,\n  currentPage: _propTypes.default.number,\n  draggable: _propTypes.default.bool,\n  collapsibleLanes: _propTypes.default.bool,\n  droppable: _propTypes.default.bool,\n  onCardMoveAcrossLanes: _propTypes.default.func,\n  onCardClick: _propTypes.default.func,\n  onBeforeCardDelete: _propTypes.default.func,\n  onCardDelete: _propTypes.default.func,\n  onCardAdd: _propTypes.default.func,\n  onCardUpdate: _propTypes.default.func,\n  onLaneDelete: _propTypes.default.func,\n  onLaneUpdate: _propTypes.default.func,\n  onLaneClick: _propTypes.default.func,\n  onLaneScroll: _propTypes.default.func,\n  editable: _propTypes.default.bool,\n  laneDraggable: _propTypes.default.bool,\n  cardDraggable: _propTypes.default.bool,\n  cardDragClass: _propTypes.default.string,\n  cardDropClass: _propTypes.default.string,\n  canAddLanes: _propTypes.default.bool,\n  t: _propTypes.default.func.isRequired\n};\nLane.defaultProps = {\n  style: {},\n  titleStyle: {},\n  labelStyle: {},\n  label: undefined,\n  editable: false,\n  onLaneUpdate: () => {},\n  onCardAdd: () => {},\n  onCardUpdate: () => {}\n};\nconst mapDispatchToProps = dispatch => ({\n  actions: (0, _redux.bindActionCreators)(laneActions, dispatch)\n});\nvar _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(Lane);\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}