{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n/**\n * @fileOverview X Axis\n */\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useChartHeight, useChartWidth, useXAxisOrThrow } from '../context/chartLayoutContext';\nimport { CartesianAxis } from './CartesianAxis';\nimport { getTicksOfAxis } from '../util/ChartUtils';\n\n/** Define of XAxis props */\n\nexport var XAxis = function XAxis(_ref) {\n  var xAxisId = _ref.xAxisId;\n  var width = useChartWidth();\n  var height = useChartHeight();\n  var axisOptions = useXAxisOrThrow(xAxisId);\n  if (axisOptions == null) {\n    return null;\n  }\n  return /*#__PURE__*/(\n    // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.\n    React.createElement(CartesianAxis, _extends({}, axisOptions, {\n      className: clsx(\"recharts-\".concat(axisOptions.axisType, \" \").concat(axisOptions.axisType), axisOptions.className),\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      },\n      ticksGenerator: function ticksGenerator(axis) {\n        return getTicksOfAxis(axis, true);\n      }\n    }))\n  );\n};\nXAxis.displayName = 'XAxis';\nXAxis.defaultProps = {\n  allowDecimals: true,\n  hide: false,\n  orientation: 'bottom',\n  width: 0,\n  height: 30,\n  mirror: false,\n  xAxisId: 0,\n  tickCount: 5,\n  type: 'category',\n  padding: {\n    left: 0,\n    right: 0\n  },\n  allowDataOverflow: false,\n  scale: 'auto',\n  reversed: false,\n  allowDuplicatedCategory: true\n};","map":null,"metadata":{},"sourceType":"module"}