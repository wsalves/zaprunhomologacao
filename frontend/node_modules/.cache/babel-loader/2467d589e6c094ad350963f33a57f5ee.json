{"ast":null,"code":"import addDays from 'date-fns/addDays';\nimport addSeconds from 'date-fns/addSeconds';\nimport addMinutes from 'date-fns/addMinutes';\nimport addHours from 'date-fns/addHours';\nimport addWeeks from 'date-fns/addWeeks';\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport differenceInYears from 'date-fns/differenceInYears';\nimport differenceInQuarters from 'date-fns/differenceInQuarters';\nimport differenceInMonths from 'date-fns/differenceInMonths';\nimport differenceInWeeks from 'date-fns/differenceInWeeks';\nimport differenceInDays from 'date-fns/differenceInDays';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport endOfDay from 'date-fns/endOfDay';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfYear from 'date-fns/endOfYear';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/getDate';\nimport getDay from 'date-fns/getDay';\nimport getDaysInMonth from 'date-fns/getDaysInMonth';\nimport getHours from 'date-fns/getHours';\nimport getMinutes from 'date-fns/getMinutes';\nimport getMonth from 'date-fns/getMonth';\nimport getSeconds from 'date-fns/getSeconds';\nimport getYear from 'date-fns/getYear';\nimport isAfter from 'date-fns/isAfter';\nimport isBefore from 'date-fns/isBefore';\nimport isEqual from 'date-fns/isEqual';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameYear from 'date-fns/isSameYear';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameHour from 'date-fns/isSameHour';\nimport isValid from 'date-fns/isValid';\nimport dateFnsParse from 'date-fns/parse';\nimport setDate from 'date-fns/setDate';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport setMonth from 'date-fns/setMonth';\nimport setSeconds from 'date-fns/setSeconds';\nimport setYear from 'date-fns/setYear';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfYear from 'date-fns/startOfYear';\nimport parseISO from 'date-fns/parseISO';\nimport formatISO from 'date-fns/formatISO';\nimport isWithinInterval from 'date-fns/isWithinInterval';\nimport longFormatters from 'date-fns/_lib/format/longFormatters';\nimport defaultLocale from 'date-fns/locale/en-US';\nconst defaultFormats = {\n  dayOfMonth: \"d\",\n  fullDate: \"PP\",\n  fullDateWithWeekday: \"PPPP\",\n  fullDateTime: \"PP p\",\n  fullDateTime12h: \"PP hh:mm aaa\",\n  fullDateTime24h: \"PP HH:mm\",\n  fullTime: \"p\",\n  fullTime12h: \"hh:mm aaa\",\n  fullTime24h: \"HH:mm\",\n  hours12h: \"hh\",\n  hours24h: \"HH\",\n  keyboardDate: \"P\",\n  keyboardDateTime: \"P p\",\n  keyboardDateTime12h: \"P hh:mm aaa\",\n  keyboardDateTime24h: \"P HH:mm\",\n  minutes: \"mm\",\n  month: \"LLLL\",\n  monthAndDate: \"MMMM d\",\n  monthAndYear: \"LLLL yyyy\",\n  monthShort: \"MMM\",\n  weekday: \"EEEE\",\n  weekdayShort: \"EEE\",\n  normalDate: \"d MMMM\",\n  normalDateWithWeekday: \"EEE, MMM d\",\n  seconds: \"ss\",\n  shortDate: \"MMM d\",\n  year: \"yyyy\"\n};\nclass DateFnsUtils {\n  constructor() {\n    let {\n      locale,\n      formats\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.lib = \"date-fns\";\n    // Note: date-fns input types are more lenient than this adapter, so we need to expose our more\n    // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.\n    this.is12HourCycleInCurrentLocale = () => {\n      var _a;\n      if (this.locale) {\n        return /a/.test((_a = this.locale.formatLong) === null || _a === void 0 ? void 0 : _a.time());\n      }\n      // By default date-fns is using en-US locale with am/pm enabled\n      return true;\n    };\n    this.getFormatHelperText = format => {\n      var _a, _b;\n      // @see https://github.com/date-fns/date-fns/blob/master/src/format/index.js#L31\n      const longFormatRegexp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n      const locale = this.locale || defaultLocale;\n      return (_b = (_a = format.match(longFormatRegexp)) === null || _a === void 0 ? void 0 : _a.map(token => {\n        const firstCharacter = token[0];\n        if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n          const longFormatter = longFormatters[firstCharacter];\n          return longFormatter(token, locale.formatLong, {});\n        }\n        return token;\n      }).join(\"\").replace(/(aaa|aa|a)/g, \"(a|p)m\").toLocaleLowerCase()) !== null && _b !== void 0 ? _b : format;\n    };\n    this.parseISO = isoString => {\n      return parseISO(isoString);\n    };\n    this.toISO = value => {\n      return formatISO(value, {\n        format: \"extended\"\n      });\n    };\n    this.getCurrentLocaleCode = () => {\n      var _a;\n      return ((_a = this.locale) === null || _a === void 0 ? void 0 : _a.code) || \"en-US\";\n    };\n    this.addSeconds = (value, count) => {\n      return addSeconds(value, count);\n    };\n    this.addMinutes = (value, count) => {\n      return addMinutes(value, count);\n    };\n    this.addHours = (value, count) => {\n      return addHours(value, count);\n    };\n    this.addDays = (value, count) => {\n      return addDays(value, count);\n    };\n    this.addWeeks = (value, count) => {\n      return addWeeks(value, count);\n    };\n    this.addMonths = (value, count) => {\n      return addMonths(value, count);\n    };\n    this.addYears = (value, count) => {\n      return addYears(value, count);\n    };\n    this.isValid = value => {\n      return isValid(this.date(value));\n    };\n    this.getDiff = (value, comparing, unit) => {\n      var _a;\n      // we output 0 if the compare date is string and parsing is not valid\n      const dateToCompare = (_a = this.date(comparing)) !== null && _a !== void 0 ? _a : value;\n      if (!this.isValid(dateToCompare)) {\n        return 0;\n      }\n      switch (unit) {\n        case \"years\":\n          return differenceInYears(value, dateToCompare);\n        case \"quarters\":\n          return differenceInQuarters(value, dateToCompare);\n        case \"months\":\n          return differenceInMonths(value, dateToCompare);\n        case \"weeks\":\n          return differenceInWeeks(value, dateToCompare);\n        case \"days\":\n          return differenceInDays(value, dateToCompare);\n        case \"hours\":\n          return differenceInHours(value, dateToCompare);\n        case \"minutes\":\n          return differenceInMinutes(value, dateToCompare);\n        case \"seconds\":\n          return differenceInSeconds(value, dateToCompare);\n        default:\n          {\n            return differenceInMilliseconds(value, dateToCompare);\n          }\n      }\n    };\n    this.isAfter = (value, comparing) => {\n      return isAfter(value, comparing);\n    };\n    this.isBefore = (value, comparing) => {\n      return isBefore(value, comparing);\n    };\n    this.startOfDay = value => {\n      return startOfDay(value);\n    };\n    this.endOfDay = value => {\n      return endOfDay(value);\n    };\n    this.getHours = value => {\n      return getHours(value);\n    };\n    this.setHours = (value, count) => {\n      return setHours(value, count);\n    };\n    this.setMinutes = (value, count) => {\n      return setMinutes(value, count);\n    };\n    this.getSeconds = value => {\n      return getSeconds(value);\n    };\n    this.setSeconds = (value, count) => {\n      return setSeconds(value, count);\n    };\n    this.isSameDay = (value, comparing) => {\n      return isSameDay(value, comparing);\n    };\n    this.isSameMonth = (value, comparing) => {\n      return isSameMonth(value, comparing);\n    };\n    this.isSameYear = (value, comparing) => {\n      return isSameYear(value, comparing);\n    };\n    this.isSameHour = (value, comparing) => {\n      return isSameHour(value, comparing);\n    };\n    this.startOfYear = value => {\n      return startOfYear(value);\n    };\n    this.endOfYear = value => {\n      return endOfYear(value);\n    };\n    this.startOfMonth = value => {\n      return startOfMonth(value);\n    };\n    this.endOfMonth = value => {\n      return endOfMonth(value);\n    };\n    this.startOfWeek = value => {\n      return startOfWeek(value, {\n        locale: this.locale\n      });\n    };\n    this.endOfWeek = value => {\n      return endOfWeek(value, {\n        locale: this.locale\n      });\n    };\n    this.getYear = value => {\n      return getYear(value);\n    };\n    this.setYear = (value, count) => {\n      return setYear(value, count);\n    };\n    this.date = value => {\n      if (typeof value === \"undefined\") {\n        return new Date();\n      }\n      if (value === null) {\n        return null;\n      }\n      return new Date(value);\n    };\n    this.toJsDate = value => {\n      return value;\n    };\n    this.parse = (value, formatString) => {\n      if (value === \"\") {\n        return null;\n      }\n      return dateFnsParse(value, formatString, new Date(), {\n        locale: this.locale\n      });\n    };\n    this.format = (date, formatKey) => {\n      return this.formatByString(date, this.formats[formatKey]);\n    };\n    this.formatByString = (date, formatString) => {\n      return format(date, formatString, {\n        locale: this.locale\n      });\n    };\n    this.isEqual = (date, comparing) => {\n      if (date === null && comparing === null) {\n        return true;\n      }\n      return isEqual(date, comparing);\n    };\n    this.isNull = date => {\n      return date === null;\n    };\n    this.isAfterDay = (date, value) => {\n      return isAfter(date, endOfDay(value));\n    };\n    this.isBeforeDay = (date, value) => {\n      return isBefore(date, startOfDay(value));\n    };\n    this.isBeforeYear = (date, value) => {\n      return isBefore(date, startOfYear(value));\n    };\n    this.isAfterYear = (date, value) => {\n      return isAfter(date, endOfYear(value));\n    };\n    this.isWithinRange = (date, _ref) => {\n      let [start, end] = _ref;\n      return isWithinInterval(date, {\n        start,\n        end\n      });\n    };\n    this.formatNumber = numberToFormat => {\n      return numberToFormat;\n    };\n    this.getMinutes = date => {\n      return getMinutes(date);\n    };\n    this.getDate = date => {\n      return getDate(date);\n    };\n    this.setDate = (date, count) => {\n      return setDate(date, count);\n    };\n    this.getMonth = date => {\n      return getMonth(date);\n    };\n    this.getDaysInMonth = date => {\n      return getDaysInMonth(date);\n    };\n    this.setMonth = (date, count) => {\n      return setMonth(date, count);\n    };\n    this.getMeridiemText = ampm => {\n      return ampm === \"am\" ? \"AM\" : \"PM\";\n    };\n    this.getNextMonth = date => {\n      return addMonths(date, 1);\n    };\n    this.getPreviousMonth = date => {\n      return addMonths(date, -1);\n    };\n    this.getMonthArray = date => {\n      const firstMonth = startOfYear(date);\n      const monthArray = [firstMonth];\n      while (monthArray.length < 12) {\n        const prevMonth = monthArray[monthArray.length - 1];\n        monthArray.push(this.getNextMonth(prevMonth));\n      }\n      return monthArray;\n    };\n    this.mergeDateAndTime = (date, time) => {\n      return this.setSeconds(this.setMinutes(this.setHours(date, this.getHours(time)), this.getMinutes(time)), this.getSeconds(time));\n    };\n    this.getWeekdays = () => {\n      const now = new Date();\n      return eachDayOfInterval({\n        start: startOfWeek(now, {\n          locale: this.locale\n        }),\n        end: endOfWeek(now, {\n          locale: this.locale\n        })\n      }).map(day => this.formatByString(day, \"EEEEEE\"));\n    };\n    this.getWeekArray = date => {\n      const start = startOfWeek(startOfMonth(date), {\n        locale: this.locale\n      });\n      const end = endOfWeek(endOfMonth(date), {\n        locale: this.locale\n      });\n      let count = 0;\n      let current = start;\n      const nestedWeeks = [];\n      let lastDay = null;\n      while (isBefore(current, end)) {\n        const weekNumber = Math.floor(count / 7);\n        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n        const day = getDay(current);\n        if (lastDay !== day) {\n          lastDay = day;\n          nestedWeeks[weekNumber].push(current);\n          count += 1;\n        }\n        current = addDays(current, 1);\n      }\n      return nestedWeeks;\n    };\n    this.getYearRange = (start, end) => {\n      const startDate = startOfYear(start);\n      const endDate = endOfYear(end);\n      const years = [];\n      let current = startDate;\n      while (isBefore(current, endDate)) {\n        years.push(current);\n        current = addYears(current, 1);\n      }\n      return years;\n    };\n    this.locale = locale;\n    this.formats = Object.assign({}, defaultFormats, formats);\n  }\n  isBeforeMonth(value, comparing) {\n    return isBefore(value, startOfMonth(comparing));\n  }\n  isAfterMonth(value, comparing) {\n    return isAfter(value, startOfMonth(comparing));\n  }\n}\nexport { DateFnsUtils as default };","map":null,"metadata":{},"sourceType":"module"}